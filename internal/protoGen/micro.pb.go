// Code generated by protoc-gen-go. DO NOT EDIT.
// source: micro.proto

package micro

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Repository struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Repository) Reset()         { *m = Repository{} }
func (m *Repository) String() string { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()    {}
func (*Repository) Descriptor() ([]byte, []int) {
	return fileDescriptor_0147923bbc6a29d9, []int{0}
}

func (m *Repository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Repository.Unmarshal(m, b)
}
func (m *Repository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Repository.Marshal(b, m, deterministic)
}
func (m *Repository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Repository.Merge(m, src)
}
func (m *Repository) XXX_Size() int {
	return xxx_messageInfo_Repository.Size(m)
}
func (m *Repository) XXX_DiscardUnknown() {
	xxx_messageInfo_Repository.DiscardUnknown(m)
}

var xxx_messageInfo_Repository proto.InternalMessageInfo

func (m *Repository) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Repository) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AddedRepoResponse struct {
	AddedRepo            *Repository `protobuf:"bytes,1,opt,name=addedRepo,proto3" json:"addedRepo,omitempty"`
	Error                *Error      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AddedRepoResponse) Reset()         { *m = AddedRepoResponse{} }
func (m *AddedRepoResponse) String() string { return proto.CompactTextString(m) }
func (*AddedRepoResponse) ProtoMessage()    {}
func (*AddedRepoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0147923bbc6a29d9, []int{1}
}

func (m *AddedRepoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddedRepoResponse.Unmarshal(m, b)
}
func (m *AddedRepoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddedRepoResponse.Marshal(b, m, deterministic)
}
func (m *AddedRepoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddedRepoResponse.Merge(m, src)
}
func (m *AddedRepoResponse) XXX_Size() int {
	return xxx_messageInfo_AddedRepoResponse.Size(m)
}
func (m *AddedRepoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddedRepoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddedRepoResponse proto.InternalMessageInfo

func (m *AddedRepoResponse) GetAddedRepo() *Repository {
	if m != nil {
		return m.AddedRepo
	}
	return nil
}

func (m *AddedRepoResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Error struct {
	ErrorMessage         string   `protobuf:"bytes,1,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_0147923bbc6a29d9, []int{2}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*Repository)(nil), "Repository")
	proto.RegisterType((*AddedRepoResponse)(nil), "AddedRepoResponse")
	proto.RegisterType((*Error)(nil), "Error")
}

func init() { proto.RegisterFile("micro.proto", fileDescriptor_0147923bbc6a29d9) }

var fileDescriptor_0147923bbc6a29d9 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xb1, 0xcb, 0xc2, 0x30,
	0x14, 0xc4, 0x69, 0xbf, 0xb6, 0xd0, 0x97, 0x0f, 0xa1, 0x6f, 0x2a, 0xe2, 0x50, 0x32, 0x48, 0x45,
	0x08, 0x52, 0x47, 0xa7, 0x0e, 0x8e, 0x2e, 0x71, 0x75, 0xa9, 0xcd, 0x43, 0x32, 0xb4, 0x29, 0x49,
	0x11, 0xfc, 0xef, 0xa5, 0x11, 0xa9, 0xe2, 0x76, 0x77, 0xe1, 0x7e, 0x17, 0x1e, 0xb0, 0x4e, 0xb7,
	0xd6, 0x88, 0xc1, 0x9a, 0xd1, 0xf0, 0x1d, 0x80, 0xa4, 0xc1, 0x38, 0x3d, 0x1a, 0xfb, 0xc0, 0x05,
	0x84, 0x5a, 0xe5, 0x41, 0x11, 0x94, 0x91, 0x0c, 0xb5, 0x42, 0x84, 0xa8, 0x6f, 0x3a, 0xca, 0xc3,
	0x22, 0x28, 0x53, 0xe9, 0x35, 0xbf, 0x40, 0x56, 0x2b, 0x45, 0x6a, 0xaa, 0x49, 0x72, 0x83, 0xe9,
	0x1d, 0xe1, 0x06, 0xd2, 0xe6, 0x1d, 0xfa, 0x3e, 0xab, 0x98, 0x98, 0xc1, 0x72, 0x7e, 0xc5, 0x15,
	0xc4, 0x64, 0xad, 0xb1, 0x1e, 0xca, 0xaa, 0x44, 0x1c, 0x27, 0x27, 0x5f, 0x21, 0xdf, 0x42, 0xec,
	0x3d, 0x72, 0xf8, 0xf7, 0xe2, 0x44, 0xce, 0x35, 0x37, 0xf2, 0xd0, 0x54, 0x7e, 0x65, 0xd5, 0x01,
	0xb2, 0x79, 0xe3, 0x4c, 0xf6, 0xae, 0x5b, 0xc2, 0x35, 0xfc, 0xd5, 0x4a, 0xe1, 0xe7, 0xfc, 0x12,
	0xc5, 0xcf, 0x97, 0xaf, 0x89, 0x3f, 0xc0, 0xfe, 0x19, 0x00, 0x00, 0xff, 0xff, 0x63, 0x94, 0x77,
	0x46, 0x0f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RepositoryServiceClient is the client API for RepositoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RepositoryServiceClient interface {
	Add(ctx context.Context, in *Repository, opts ...grpc.CallOption) (*AddedRepoResponse, error)
}

type repositoryServiceClient struct {
	cc *grpc.ClientConn
}

func NewRepositoryServiceClient(cc *grpc.ClientConn) RepositoryServiceClient {
	return &repositoryServiceClient{cc}
}

func (c *repositoryServiceClient) Add(ctx context.Context, in *Repository, opts ...grpc.CallOption) (*AddedRepoResponse, error) {
	out := new(AddedRepoResponse)
	err := c.cc.Invoke(ctx, "/RepositoryService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryServiceServer is the server API for RepositoryService service.
type RepositoryServiceServer interface {
	Add(context.Context, *Repository) (*AddedRepoResponse, error)
}

// UnimplementedRepositoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRepositoryServiceServer struct {
}

func (*UnimplementedRepositoryServiceServer) Add(ctx context.Context, req *Repository) (*AddedRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}

func RegisterRepositoryServiceServer(s *grpc.Server, srv RepositoryServiceServer) {
	s.RegisterService(&_RepositoryService_serviceDesc, srv)
}

func _RepositoryService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Repository)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RepositoryService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).Add(ctx, req.(*Repository))
	}
	return interceptor(ctx, in, info, handler)
}

var _RepositoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RepositoryService",
	HandlerType: (*RepositoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _RepositoryService_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "micro.proto",
}
